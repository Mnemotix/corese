<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 03 09:40:29 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:type {
  group {
         "a " if (?refer, st:turtle(?c), ?c)           
          ; separator = concat(" ;", st:nl()) 
  }
  if (?rest, concat(" ;", st:nl()), "")
}
where {
  ?in rdf:type ?c 
  
    bind(
    exists { ?in ?q ?v . filter (?q != rdf:type) }
    as ?rest)
    
    bind(isBlank(?c) && exists { ?x ?q ?c . filter(?in != ?x) }
    as ?refer)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:main {
  group { 
    st:apply-templates(?x)
    ; separator = "\n\n"
  }
}
where {
  select distinct ?x where { 
    bind (st:focus() as ?x)
    ?x ?p ?y     
    filter ( 
      isURI(?x) 
      || not exists { ?z ?q ?x }
      || (isBlank(?x) 
	  && (exists { ?a ?q ?x . ?b ?r ?x . filter(?a != ?b) }
	   || exists { ?x ?q ?x }
	  ))
    )
  } order by ?x
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:start {
  st:prolog("@prefix")
  st:nl()
  str(?main)
}
where {
  bind (st:call-template(st:main) as ?main)
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:value {
             
	?p " " 
	       
	if (?refer, st:turtle(?y), 
	if (isURI(?y) && ?y = rdf:nil, "()", ?y))
          
        ; separator = concat(" ;", st:nl()) 
        
#        ; separator = " ;\n" 
     
}
where {
  ?in ?p ?y 
  
  filter(?p not in (rdf:type))
  
  bind(
    isBlank(?y) 
    && ( (st:isStart() && exists { ?x ?q ?y . filter(?in != ?x) })
         || exists { ?y ?q ?y } 
         || ?in = ?y
       )
  as ?refer)
    
}
order by ?p ?y

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:all {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:test {
  st:load(rdf:)
  st:load(rdfs:)
  st:call-template(st:start)
}
where {
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:list {
  "(" 
    group { ?e } 
  ")"
  
}
where {
  ?in rdf:rest*/rdf:first ?e
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdf {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    minus {
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    }
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:test2 {
  st:load(rdf:)
  st:call-template(st:start)
  st:apply-templates-with-graph(st:table, rdf:)  
}
where {
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdfs {
  st:apply-templates(?x)
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# defaut processing of a variable is st:apply-templates 
#
# Olivier Corby, Wimmics Inria I3S, 2014
#
template st:profile(?in) {
  
}
where {}

 function st:process(?in) {
      if (isBlank(?in), st:apply-templates(?in), st:turtle(?in))
 }
      
 function st:default(?in) {
    st:turtle(?in)
 }
 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template  {
  "(" 
    group { 
      if (?refer, st:turtle(?e), ?e) 
      ; separator = "\n"
    } 
  ")"
  
}
where {
  ?in rdf:rest* ?r
  ?r  rdf:first ?e
  
  bind(isBlank(?e) && 
    ((st:isStart() &&  exists { ?x ?p ?e . filter(?x != ?r) })
    || exists { ?e ?q ?e })
    as ?refer)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  ?in " "
      ibox { 
  
	st:call-template(st:type, ?in)
	
	st:call-template(st:value, ?in)
      
      } 
      
      " ."      
}
where {
  ?in ?p ?y   
  filter(isUri(?in))  
}
limit 1

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  if (?refer, concat(st:turtle(?in), " "), "[")
  
      ibox {
	st:call-template(st:type, ?in)
	  
	st:call-template(st:value, ?in)
      } 
      
  if (?refer, " .", 
  if (?nested, "]", "] ."))
}
where {
  ?in ?p ?y   
  filter(isBlank(?in))
  filter not exists { ?in rdf:first ?e }
  
  bind (exists { ?a ?q ?in } as ?nested)
  
  bind (
    ?nested 
    && ((st:isStart() && exists { ?a ?q ?in . ?b ?r ?in filter(?a != ?b) })
	|| exists { ?in ?q ?in }
       )
  as ?refer)
}
limit 1

]]>
</body>
</rule>

</rdf:RDF>
