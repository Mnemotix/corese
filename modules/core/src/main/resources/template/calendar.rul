<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Jun 03 09:40:29 CEST 2016
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Display a day in the calendar of a month
# May be a link or a number
# Calling context may have set st:content and st:date 
# (cf st:content/st:query )
#
template st:date(?date) {

  coalesce(
    st:call-template-with(st:get(st:content), st:get(st:date), ?date), 
    day(?date))
  
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:link(?date) {

  "<a href='#" str(?date) "'>"  day(?date)  "</a>"
  
}
where {
   
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:main(?year) {

   st:call-template(st:head, ?year)

  "<p class='center'>"

   st:call-template(st:calendar, ?year)
    
  "</p>"

}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:start {

  st:call-template(st:main, ?year)
    
  st:call-template(st:tail)
  
}
where {
  
  bind (st:get(st:uri) as ?uri)
  bind (xsd:integer(substr(?uri, strlen(st:) + 2))   as ?tmp)
  bind (st:set(st:year, coalesce(?tmp, year(now()))) as ?year)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:content(?year) {
  format {
    """
    <a name='%s'/>
    <h4>%s</h4>  
    <p>%s</p>
    """
    
    str(?dd)
    str(?dd)
    group {
    
	format {
	  "<a href='%s'>%s</a>" 
	  
	  st:plink(?x, st:dbpedia)
	  str(?title)
	}
	
	; separator = "<br/>"
    }
  }
}
where { 
  {select distinct ?x ?date 
  where {
    ?x ?p ?date 
    filter (datatype(?date) in (xsd:date, xsd:dateTime))     
  }}
  filter (year(?date) = ?year)
  bind (cal:date(year(?date), month(?date), day(?date)) as ?dd)
  ?x rdfs:label ?l 
  bind (if (bound(?l), ?l, ?x) as ?title)
}
group by ?date
order by ?date 

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:test {

  "<table>"
  "<tr>"

  group {
    "<td>" str(?label)
      st:call-template(st:main, ?year)
    "</td>"  
  }
  
  "</tr>"
  "</table>"
    
  st:call-template(st:tail)
}
where {
  # profile.ttl graph
  bind (st:get(st:definition) as ?g)
  
  # access to the profile.ttl graph
  graph ?g {
    st:calendartest st:param [
       st:list/rdf:rest*/rdf:first (?label ?year)
    ]
  }    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:agenda {

format {
  """
  <pre>
      \n%s\n
      Mo Tu We Th Fr Sa Su \n
      %s
  </pre>
  """
  
  cal:month(?m)
  group {
	  if (?n = 1, xt:space(cal:num(?jour) - 1), "")
	  if (?n < 10, " ", "") ?n " "
	  if (?jour = "Sunday", "\n", "")
	  ; separator = ""
  }
}    
    ; separator = "\n"                   
}
where {
    bind (unnest(xt:iota(12)) as ?m)
    bind (unnest(xt:iota(cal:days(?y, ?m))) as ?n)
    bind (xsd:date(concat(?y, "-", ?m, "-", ?n)) as ?day)
    bind (xt:day(?day) as ?jour)
    
    
}
group by ?m
order by ?m
values ?y { 2015 }

function xt:space(?n) {
      if (?n = 0, "", concat("   " , xt:space(?n - 1))) 
    }

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Display a day in the calendar of a month
# May be a link or a number
# Calling context may have set st:content and st:date 
# (cf st:content/st:query )
#
template st:romain(?date) {
  
    xt:romain(day(?date))
  
}
where {
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:monthtab(?y, ?m) {
  format {
      """
      <h3 class='center'>%s</h3>   
      <table class='month'>
	<tr>%s</tr>
	<tr>    
	%s   
	%s    
	</tr>    
	%s    
      </table>
      """
      
  cal:month(?m)
  st:call-template(st:title)
  xt:td(?first - 1)
  
  group {            
	  "<td class='day'>"          
	  st:call-template(st:date, ?date)        
	  "</td>"                       
	  if (?day = "Sunday", "</tr>\n<tr>", "")
		  
	  ; separator = ""
  }
  
  if (?first + ?days - 1 <= 35 , "<tr><td>&nbsp;</td></tr>", "")   
  }

}
where {
    bind (cal:days(?y, ?m)       as ?days)
    bind (cal:num(xt:day(cal:date(?y, ?m, 1))) as ?first)
    bind (unnest(xt:iota(?days)) as ?n)
    bind (cal:date(?y, ?m, ?n)   as ?date)
    bind (xt:day(?date)          as ?day)        
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:profile {
                    
}
where {}

  function xt:space(?n) { 
         if (?n = 0, "", concat("   " , xt:space(?n - 1)))
       }
      
    function xt:td(?n) { 
         if (?n = 0, "", concat("<td/>" , xt:td(?n - 1)))
     } 
      
  
  function xt:pretty(?n) { 
    if (?n < 10, concat(" ", ?n), ?n) 
  }
  
  function us:display(?y) {
    if (st:get(st:date, st:romain), xt:romain(?y), ?y)
  }


    

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:calendar(?year) {

"<table class='calendar'>"
st:call-template(st:enum, ?year, 1, 3)  
st:call-template(st:enum, ?year, 4, 6)  
st:call-template(st:enum, ?year, 7, 9)   
st:call-template(st:enum, ?year, 10, 12) 
"</table>"  

}
where {

    
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:title {
  "<th class='right'> &nbsp; " str(?t) "</th>"
  ; separator = ""
}
where {
values ?t { "Mo" "Tu" "We" "Th" "Fr" "Sa" "Su" }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:epoch {

  st:call-template(st:era, ?fst, ?rst)

}
where {
  bind (unnest(xt:iota(1, 10)) as ?n)
  bind (?start + ((?n - 1) * 10) as ?fst)
  bind (?start + (?n * 10) - 1 as ?rst)
}
values ?start { 1901 }

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:era(?fst, ?rst) {
format {
  """
  <table>
  <tr>%s</tr>
  </table>
  """ 

  group {
    format {
	"""
	<td>  
	  <span class='shrink'>
	    <h3 class='center'>%s</h3>
	    <div class='border'>%s</div>
	  </span>
	</td>
	"""
	
	?year
	st:call-template(st:calendar, ?year)
      }
    }
}
}
where {
  bind (unnest(xt:iota(?fst, ?rst)) as ?year)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:spqr {

  st:call-template(st:start)
  
}
where {
  
  bind (st:export(st:content, st:calendar) as ?c)
  bind (st:set(st:date,    st:romain)   as ?d)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:head(?year) {
format {
  """
  <h1 class='year'>
    <a href='%s'><span>%s</span></a>
      - %s -  
    <a href='%s'><span>%s</span></a>
  </h1>
  """
  
  st:plink(concat(?uri,  (?year - 1)))
  us:display(?year - 1)
  us:display(?year)
  st:plink(concat(?uri,  (?year + 1)))
  us:display(?year + 1)
}
}
where {

bind ("http://ns.inria.fr/sparql-template/y" as ?uri)
  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:enum(?year, ?f, ?l) {
format {
  "<tr>%s</tr>\n"

  group {
    format {
      """
      <td>%s</td>
      <td>&nbsp;&nbsp;</td>
      """
      
      st:call-template(st:monthtab, ?year, ?month)
     }
  }
}
}
where {

    bind (unnest(xt:iota(?f, ?l)) as ?month)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix cal: <http://ns.inria.fr/sparql-extension/calendar/>
template st:month(?y, ?m) {
format {
    """
    <h3 class='center'>%s</h3>    
    <pre>
    Mo Tu We Th Fr Sa Su \n    
    %s    
    %s
    # additional space when last day is sunday (because \n alone fails)
    %s    
    </pre>
    """
    
    cal:month(?m)
    group {
    
        if (?n = 1, xt:space(?first - 1), "")
        xt:pretty(?n) 
        #st:call-template(st:date, ?date) " " 
        if (?jour = "Sunday", "\n", "")
        
        ; separator = ""
    }
    if (?first + ?days - 1 < 35 , "\n ", "")
    if (?first + ?days - 1 = 35 && ?last = 7, " ", "")
}


    ; separator = "\n"                   
}
where {
    bind (cal:days(?y, ?m) as ?days)
    bind (cal:num(xt:day(xsd:date(concat(?y, "-", ?m, "-", 1)))) 
    as ?first)
    bind (cal:num(xt:day(xsd:date(concat(?y, "-", ?m, "-", ?days)))) 
    as ?last)
    bind (unnest(xt:iota(?days)) as ?n)
    bind (xsd:date(concat(?y, "-", ?m, "-", ?n)) as ?date)
    bind (xt:day(?date) as ?jour)  
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template {

"<p>Calendar generated by a STTL transformation " now() "</p>"

}
where {}

]]>
</body>
</rule>

</rdf:RDF>
